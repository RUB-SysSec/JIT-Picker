From 3231538eb49250db40ac8848857d34021d28e93f Mon Sep 17 00:00:00 2001
From: Lukas Bernhard <15350042+bernhl@users.noreply.github.com>
Date: Mon, 10 Oct 2022 11:35:35 +0200
Subject: [PATCH 1/3] Fuzzilli standard changes


diff --git a/Source/JavaScriptCore/jsc.cpp b/Source/JavaScriptCore/jsc.cpp
index adb00ff0835f..8b5157d9d12a 100644
--- a/Source/JavaScriptCore/jsc.cpp
+++ b/Source/JavaScriptCore/jsc.cpp
@@ -169,7 +169,96 @@ struct MemoryFootprint {
 #if !defined(PATH_MAX)
 #define PATH_MAX 4096
 #endif
+//
+// BEGIN FUZZING CODE
+//
 
+#include <fcntl.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+#include <sys/wait.h>
+#include <sys/mman.h>
+
+#define REPRL_CRFD 100
+#define REPRL_CWFD 101
+#define REPRL_DRFD 102
+#define REPRL_DWFD 103
+#define REPRL_MAX_DATA_SIZE (16*1024*1024)
+
+#define SHM_SIZE 0x100000
+#define MAX_EDGES ((SHM_SIZE - 4) * 8)
+
+#define CHECK(cond) if (!(cond)) { fprintf(stderr, "\"" #cond "\" failed\n"); exit(EXIT_FAILURE); }
+
+// Shared memory buffer with the parent.
+char* reprl_input_data;
+
+struct shmem_data {
+    uint32_t num_edges;
+    unsigned char edges[];
+};
+
+struct shmem_data* __shmem;
+uint32_t *__edges_start, *__edges_stop;
+
+void __sanitizer_cov_reset_edgeguards() {
+    uint64_t N = 0;
+    for (uint32_t *x = __edges_start; x < __edges_stop && N < MAX_EDGES; x++)
+        *x = ++N;
+}
+
+extern "C" void __sanitizer_cov_trace_pc_guard_init(uint32_t *start, uint32_t *stop) {
+    // Avoid duplicate initialization
+    if (start == stop || *start)
+        return;
+
+    if (__edges_start != NULL || __edges_stop != NULL) {
+        fprintf(stderr, "Coverage instrumentation is only supported for a single module\n");
+        _exit(-1);
+    }
+
+    __edges_start = start;
+    __edges_stop = stop;
+
+    // Map the shared memory region
+    const char* shm_key = getenv("SHM_ID");
+    if (!shm_key) {
+        puts("[COV] no shared memory bitmap available, skipping");
+        __shmem = (struct shmem_data*) malloc(SHM_SIZE);
+    } else {
+        int fd = shm_open(shm_key, O_RDWR, S_IREAD | S_IWRITE);
+        if (fd <= -1) {
+            fprintf(stderr, "Failed to open shared memory region: %s\n", strerror(errno));
+            _exit(-1);
+        }
+
+        __shmem = (struct shmem_data*) mmap(0, SHM_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
+        if (__shmem == MAP_FAILED) {
+            fprintf(stderr, "Failed to mmap shared memory region\n");
+            _exit(-1);
+        }
+    }
+
+    __sanitizer_cov_reset_edgeguards();
+
+    __shmem->num_edges = stop - start;
+    printf("[COV] edge counters initialized. Shared memory: %s with %u edges\n", shm_key, __shmem->num_edges);
+}
+
+extern "C" void __sanitizer_cov_trace_pc_guard(uint32_t *guard) {
+    // There's a small race condition here: if this function executes in two threads for the same
+    // edge at the same time, the first thread might disable the edge (by setting the guard to zero)
+    // before the second thread fetches the guard value (and thus the index). However, our
+    // instrumentation ignores the first edge (see libcoverage.c) and so the race is unproblematic.
+    uint32_t index = *guard;
+    __shmem->edges[index / 8] |= 1 << (index % 8);
+    *guard = 0;
+}
+
+//
+// END FUZZING CODE
+//
 using namespace JSC;
 
 namespace {
@@ -389,6 +478,7 @@ static JSC_DECLARE_HOST_FUNCTION(functionFlashHeapAccess);
 static JSC_DECLARE_HOST_FUNCTION(functionDisableRichSourceInfo);
 static JSC_DECLARE_HOST_FUNCTION(functionMallocInALoop);
 static JSC_DECLARE_HOST_FUNCTION(functionTotalCompileTime);
+static JSC_DECLARE_HOST_FUNCTION(functionFuzzilli);
 
 static JSC_DECLARE_HOST_FUNCTION(functionSetUnhandledRejectionCallback);
 static JSC_DECLARE_HOST_FUNCTION(functionAsDoubleNumber);
@@ -408,7 +498,8 @@ struct Script {
 
     enum class CodeSource {
         File,
-        CommandLine
+        CommandLine,
+        REPRL
     };
 
     StrictMode strictMode;
@@ -442,6 +533,7 @@ public:
     String m_profilerOutput;
     String m_uncaughtExceptionName;
     bool m_interactive { false };
+    bool m_reprl { false };
     bool m_dump { false };
     bool m_module { false };
     bool m_exitCode { false };
@@ -540,29 +632,10 @@ private:
         addFunction(vm, "print"_s, functionPrintStdOut, 1);
         addFunction(vm, "printErr"_s, functionPrintStdErr, 1);
         addFunction(vm, "prettyPrint"_s, functionPrettyPrint, 1);
-        addFunction(vm, "quit"_s, functionQuit, 0);
         addFunction(vm, "gc"_s, functionGCAndSweep, 0);
         addFunction(vm, "fullGC"_s, functionFullGC, 0);
         addFunction(vm, "edenGC"_s, functionEdenGC, 0);
-        addFunction(vm, "gcHeapSize"_s, functionHeapSize, 0);
-        addFunction(vm, "memoryUsageStatistics"_s, functionMemoryUsageStatistics, 0);
-        addFunction(vm, "MemoryFootprint"_s, functionCreateMemoryFootprint, 0);
-        addFunction(vm, "resetMemoryPeak"_s, functionResetMemoryPeak, 0);
-        addFunction(vm, "addressOf"_s, functionAddressOf, 1);
-        addFunction(vm, "version"_s, functionVersion, 1);
-        addFunction(vm, "run"_s, functionRun, 1);
-        addFunction(vm, "runString"_s, functionRunString, 1);
-        addFunction(vm, "load"_s, functionLoad, 1);
-        addFunction(vm, "loadString"_s, functionLoadString, 1);
-        addFunction(vm, "readFile"_s, functionReadFile, 2);
-        addFunction(vm, "read"_s, functionReadFile, 2);
-        addFunction(vm, "writeFile"_s, functionWriteFile, 2);
-        addFunction(vm, "write"_s, functionWriteFile, 2);
-        addFunction(vm, "checkSyntax"_s, functionCheckSyntax, 1);
-        addFunction(vm, "sleepSeconds"_s, functionSleepSeconds, 1);
         addFunction(vm, "jscStack"_s, functionJSCStack, 1);
-        addFunction(vm, "openFile"_s, functionOpenFile, 1);
-        addFunction(vm, "readline"_s, functionReadline, 0);
         addFunction(vm, "preciseTime"_s, functionPreciseTime, 0);
         addFunction(vm, "neverInlineFunction"_s, functionNeverInlineFunction, 1);
         addFunction(vm, "noInline"_s, functionNeverInlineFunction, 1);
@@ -575,7 +648,6 @@ private:
         addFunction(vm, "optimizeNextInvocation"_s, functionOptimizeNextInvocation, 1);
         addFunction(vm, "reoptimizationRetryCount"_s, functionReoptimizationRetryCount, 1);
         addFunction(vm, "transferArrayBuffer"_s, functionTransferArrayBuffer, 1);
-        addFunction(vm, "failNextNewCodeBlock"_s, functionFailNextNewCodeBlock, 1);
 #if ENABLE(SAMPLING_FLAGS)
         addFunction(vm, "setSamplingFlags"_s, functionSetSamplingFlags, 1);
         addFunction(vm, "clearSamplingFlags"_s, functionClearSamplingFlags, 1);
@@ -693,6 +765,8 @@ private:
         addFunction(vm, "mallocInALoop"_s, functionMallocInALoop, 0);
         addFunction(vm, "totalCompileTime"_s, functionTotalCompileTime, 0);
 
+        addFunction(vm, "fuzzilli"_s, functionFuzzilli, 2);
+
         addFunction(vm, "setUnhandledRejectionCallback"_s, functionSetUnhandledRejectionCallback, 1);
 
         addFunction(vm, "asDoubleNumber"_s, functionAsDoubleNumber, 1);
@@ -741,6 +815,7 @@ private:
     static Identifier moduleLoaderResolve(JSGlobalObject*, JSModuleLoader*, JSValue, JSValue, JSValue);
     static JSInternalPromise* moduleLoaderFetch(JSGlobalObject*, JSModuleLoader*, JSValue, JSValue, JSValue);
     static JSObject* moduleLoaderCreateImportMetaProperties(JSGlobalObject*, JSModuleLoader*, JSValue, JSModuleRecord*, JSValue);
+    static void promiseRejectionTracker(JSGlobalObject*, JSPromise*, JSPromiseRejectionOperation);
 
     static void reportUncaughtExceptionAtEventLoop(JSGlobalObject*, Exception*);
 };
@@ -764,7 +839,7 @@ const GlobalObjectMethodTable GlobalObject::s_globalObjectMethodTable = {
     &moduleLoaderFetch,
     &moduleLoaderCreateImportMetaProperties,
     nullptr, // moduleLoaderEvaluate
-    nullptr, // promiseRejectionTracker
+    &promiseRejectionTracker,
     &reportUncaughtExceptionAtEventLoop,
     &currentScriptExecutionOwner,
     &scriptExecutionStatus,
@@ -1312,6 +1387,18 @@ JSObject* GlobalObject::moduleLoaderCreateImportMetaProperties(JSGlobalObject* g
     return metaProperties;
 }
 
+static int numPendingRejectedPromises = 0;
+void GlobalObject::promiseRejectionTracker(JSGlobalObject*, JSPromise*, JSPromiseRejectionOperation operation) {
+    switch (operation) {
+    case JSPromiseRejectionOperation::Reject:
+        numPendingRejectedPromises += 1;
+        break;
+    case JSPromiseRejectionOperation::Handle:
+        numPendingRejectedPromises -= 1;
+        break;
+    }
+}
+
 template <typename T>
 static CString toCString(JSGlobalObject* globalObject, ThrowScope& scope, T& string)
 {
@@ -1382,6 +1469,55 @@ JSC_DEFINE_HOST_FUNCTION(functionPrettyPrint, (JSGlobalObject* globalObject, Cal
     return printInternal(globalObject, callFrame, stdout, true);
 }
 
+// We have to assume that the fuzzer will be able to call this function e.g. by
+// enumerating the properties of the global object and eval'ing them. As such
+// this function is implemented in a way that requires passing some magic value
+// as first argument (with the idea being that the fuzzer won't be able to
+// generate this value) which then also acts as a selector for the operation
+// to perform.
+JSC_DEFINE_HOST_FUNCTION(functionFuzzilli, (JSGlobalObject* globalObject, CallFrame* callFrame))
+{
+    VM& vm = globalObject->vm();
+    auto scope = DECLARE_THROW_SCOPE(vm);
+    if (!callFrame->argument(0).isString()) {
+        // We directly require a string as argument for simplicity
+        return JSValue::encode(jsUndefined());
+    }
+    auto operation = callFrame->argument(0).toString(globalObject)->value(globalObject);
+    RETURN_IF_EXCEPTION(scope, encodedJSValue());
+
+    if (operation == "FUZZILLI_CRASH"_s) {
+        auto arg = callFrame->argument(1).toInt32(globalObject);
+        RETURN_IF_EXCEPTION(scope, encodedJSValue());
+        switch (arg) {
+            case 0:
+                *((int*)0x41414141) = 0x1337;
+                break;
+            case 1:
+                RELEASE_ASSERT(0);
+                break;
+            case 2:
+                ASSERT(0);
+                break;
+        }
+    } else if (operation == "FUZZILLI_PRINT"_s) {
+        static FILE* fzliout = fdopen(REPRL_DWFD, "w");
+        if (!fzliout) {
+            fprintf(stderr, "Fuzzer output channel not available, printing to stdout instead\n");
+            fzliout = stdout;
+        }
+
+        String string = callFrame->argument(1).toWTFString(globalObject);
+        RETURN_IF_EXCEPTION(scope, { });
+        auto cString = toCString(globalObject, scope, string);
+        RETURN_IF_EXCEPTION(scope, { });
+        fprintf(fzliout, "%s\n", cString.data());
+        fflush(fzliout);
+    }
+
+    return JSValue::encode(jsUndefined());
+}
+
 JSC_DEFINE_HOST_FUNCTION(functionDebug, (JSGlobalObject* globalObject, CallFrame* callFrame))
 {
     VM& vm = globalObject->vm();
@@ -3347,7 +3483,15 @@ static void runWithOptions(GlobalObject* globalObject, CommandLine& options, boo
     for (size_t i = 0; i < scripts.size(); i++) {
         JSInternalPromise* promise = nullptr;
         bool isModule = options.m_module || scripts[i].scriptType == Script::ScriptType::Module;
-        if (scripts[i].codeSource == Script::CodeSource::File) {
+        if (scripts[i].codeSource == Script::CodeSource::REPRL) {
+            size_t script_size;
+            CHECK(read(REPRL_CRFD, &script_size, 8) == 8);
+            CHECK(script_size < REPRL_MAX_DATA_SIZE);
+            scriptBuffer.resize(script_size);
+            char* ptr = scriptBuffer.data();
+            memcpy(ptr, reprl_input_data, script_size);
+            fileName = "[REPRL]"_s;
+        } else if (scripts[i].codeSource == Script::CodeSource::File) {
             fileName = String::fromLatin1(scripts[i].argument);
             if (scripts[i].strictMode == Script::StrictMode::Strict)
                 scriptBuffer.append("\"use strict\";\n", strlen("\"use strict\";\n"));
@@ -3502,6 +3646,7 @@ static NO_RETURN void printUsageStatement(bool help = false)
     fprintf(stderr, "  -f         Specifies a source file (deprecated)\n");
     fprintf(stderr, "  -h|--help  Prints this help message\n");
     fprintf(stderr, "  -i         Enables interactive mode (default if no files are specified)\n");
+    fprintf(stderr, "  --reprl    Enables REPRL mode (used by the Fuzzilli fuzzer)\n");
     fprintf(stderr, "  -m         Execute as a module\n");
 #if OS(UNIX)
     fprintf(stderr, "  -s         Installs signal handlers that exit on a crash (Unix platforms only, lldb will not work with this option) \n");
@@ -3587,6 +3732,11 @@ void CommandLine::parseArguments(int argc, char** argv)
             m_interactive = true;
             continue;
         }
+        if (!strcmp(arg, "--reprl")) {
+            m_reprl = true;
+            m_scripts.append(Script(Script::StrictMode::Sloppy, Script::CodeSource::REPRL, Script::ScriptType::Script, nullptr));
+            continue;
+        }
         if (!strcmp(arg, "-d")) {
             m_dump = true;
             continue;
@@ -3774,7 +3924,37 @@ int runJSC(const CommandLine& options, bool isWorker, const Func& func)
         vm.m_typedArrayController = adoptRef(new JSC::SimpleTypedArrayController(false));
 
     int result;
-    bool success = true;
+    bool success;
+
+    // Let parent know we are ready
+    if (options.m_reprl) {
+        char helo[] = "HELO";
+        CHECK(write(REPRL_CWFD, helo, 4) == 4);
+        CHECK(read(REPRL_CRFD, helo, 4) == 4);
+
+        if (memcmp(helo, "HELO", 4) != 0) {
+            fprintf(stderr, "[REPRL] Invalid response from parent\n");
+            exit(EXIT_FAILURE);
+        }
+
+        // Mmap the data input buffer.
+        reprl_input_data = (char*)mmap(0, REPRL_MAX_DATA_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, REPRL_DRFD, 0);
+        CHECK(reprl_input_data != MAP_FAILED);
+    }
+
+    do {
+    // Keep indention for easier diffing
+    if (options.m_reprl) {
+        unsigned action;
+        CHECK(read(REPRL_CRFD, &action, 4) == 4);
+        if (action != 'cexe') {
+            fprintf(stderr, "[REPRL] Unknown action: %u\n", action);
+            exit(EXIT_FAILURE);
+        }
+    }
+
+    success = true;
+
     GlobalObject* globalObject = nullptr;
     {
         JSLockHolder locker(vm);
@@ -3788,7 +3968,7 @@ int runJSC(const CommandLine& options, bool isWorker, const Func& func)
     vm.deferredWorkTimer->runRunLoop();
     {
         JSLockHolder locker(vm);
-        if (options.m_interactive && success)
+        if (!options.m_reprl && options.m_interactive && success)
             runInteractive(globalObject);
     }
 
@@ -3857,7 +4037,22 @@ int runJSC(const CommandLine& options, bool isWorker, const Func& func)
         dataLogLn(*vm.jitSizeStatistics);
 #endif
 
-    vm.codeCache()->write();
+    if (options.m_reprl) {
+        // In REPRL mode, stdout and stderr may be regular files, so we need to fflush them here.
+        fflush(stdout);
+        fflush(stderr);
+
+        // Check if any rejected promises weren't handled
+        if (numPendingRejectedPromises > 0) {
+            result = 1;
+            numPendingRejectedPromises = 0;
+        }
+
+        int status = (result & 0xff) << 8;
+        CHECK(write(REPRL_CWFD, &status, 4) == 4);
+        __sanitizer_cov_reset_edgeguards();
+    }
+    } while (options.m_reprl);
 
     if (options.m_destroyVM || isWorker) {
         JSLockHolder locker(vm);
@@ -3866,6 +4061,8 @@ int runJSC(const CommandLine& options, bool isWorker, const Func& func)
         vm.deref();
     }
 
+    vm.codeCache()->write();
+
     return result;
 }
 
-- 
2.34.1


From f3fd3f19edfaf90d51812c5511bcee7ff160bf7c Mon Sep 17 00:00:00 2001
From: Lukas Bernhard <15350042+bernhl@users.noreply.github.com>
Date: Wed, 29 Jun 2022 15:47:20 +0200
Subject: [PATCH 2/3] Make execution deterministic


diff --git a/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp b/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp
index 445b07a72337..a4053ec835bc 100644
--- a/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp
+++ b/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp
@@ -3248,7 +3248,7 @@ private:
         // Now we get 53bit precision random double value in [0, 1).
         LValue result = m_out.doubleMul(double53Integer, m_out.constDouble(scale));
 
-        setDouble(result);
+        setDouble(m_out.constDouble(0));
     }
 
     void compileArithRound()
diff --git a/Source/JavaScriptCore/jit/AssemblyHelpers.cpp b/Source/JavaScriptCore/jit/AssemblyHelpers.cpp
index c26484e3a7ce..e67c22e0e735 100644
--- a/Source/JavaScriptCore/jit/AssemblyHelpers.cpp
+++ b/Source/JavaScriptCore/jit/AssemblyHelpers.cpp
@@ -545,6 +545,9 @@ void emitRandomThunkImpl(AssemblyHelpers& jit, GPRReg scratch0, GPRReg scratch1,
     // Now we get 53bit precision random double value in [0, 1).
     jit.move(AssemblyHelpers::TrustedImmPtr(&scale), scratch1);
     jit.mulDouble(AssemblyHelpers::Address(scratch1), result);
+
+    static constexpr double zeroConstant = 0.0;
+    jit.loadDouble(MacroAssembler::TrustedImmPtr(&zeroConstant), result);
 }
 
 void AssemblyHelpers::emitRandomThunk(JSGlobalObject* globalObject, GPRReg scratch0, GPRReg scratch1, GPRReg scratch2, FPRReg result)
diff --git a/Source/JavaScriptCore/jit/ThunkGenerators.cpp b/Source/JavaScriptCore/jit/ThunkGenerators.cpp
index 62c783c59525..a0f86bc71d56 100644
--- a/Source/JavaScriptCore/jit/ThunkGenerators.cpp
+++ b/Source/JavaScriptCore/jit/ThunkGenerators.cpp
@@ -1292,17 +1292,10 @@ MacroAssemblerCodeRef<JITThunkPtrTag> imulThunkGenerator(VM& vm)
 MacroAssemblerCodeRef<JITThunkPtrTag> randomThunkGenerator(VM& vm)
 {
     SpecializedThunkJIT jit(vm, 0);
-    if (!jit.supportsFloatingPoint())
-        return MacroAssemblerCodeRef<JITThunkPtrTag>::createSelfManagedCodeRef(vm.jitStubs->ctiNativeCall(vm));
-
-#if USE(JSVALUE64)
-    jit.emitRandomThunk(vm, SpecializedThunkJIT::regT0, SpecializedThunkJIT::regT1, SpecializedThunkJIT::regT2, SpecializedThunkJIT::regT3, SpecializedThunkJIT::fpRegT0);
+    static constexpr double zeroConstant = 0.0;
+    jit.loadDouble(MacroAssembler::TrustedImmPtr(&zeroConstant), SpecializedThunkJIT::fpRegT0);
     jit.returnDouble(SpecializedThunkJIT::fpRegT0);
-
     return jit.finalize(vm.jitStubs->ctiNativeTailCall(vm), "random");
-#else
-    return MacroAssemblerCodeRef<JITThunkPtrTag>::createSelfManagedCodeRef(vm.jitStubs->ctiNativeCall(vm));
-#endif
 }
 
 MacroAssemblerCodeRef<JITThunkPtrTag> boundFunctionCallGenerator(VM& vm)
diff --git a/Source/JavaScriptCore/jsc.cpp b/Source/JavaScriptCore/jsc.cpp
index 8b5157d9d12a..bd31b2420d0b 100644
--- a/Source/JavaScriptCore/jsc.cpp
+++ b/Source/JavaScriptCore/jsc.cpp
@@ -1601,7 +1601,7 @@ JSC_DEFINE_HOST_FUNCTION(functionGCAndSweep, (JSGlobalObject* globalObject, Call
     VM& vm = globalObject->vm();
     JSLockHolder lock(vm);
     vm.heap.collectNow(Sync, CollectionScope::Full);
-    return JSValue::encode(jsNumber(vm.heap.sizeAfterLastFullCollection()));
+    return JSValue::encode(jsUndefined());
 }
 
 JSC_DEFINE_HOST_FUNCTION(functionFullGC, (JSGlobalObject* globalObject, CallFrame*))
@@ -1609,7 +1609,7 @@ JSC_DEFINE_HOST_FUNCTION(functionFullGC, (JSGlobalObject* globalObject, CallFram
     VM& vm = globalObject->vm();
     JSLockHolder lock(vm);
     vm.heap.collectSync(CollectionScope::Full);
-    return JSValue::encode(jsNumber(vm.heap.sizeAfterLastFullCollection()));
+    return JSValue::encode(jsUndefined());
 }
 
 JSC_DEFINE_HOST_FUNCTION(functionEdenGC, (JSGlobalObject* globalObject, CallFrame*))
@@ -1617,14 +1617,14 @@ JSC_DEFINE_HOST_FUNCTION(functionEdenGC, (JSGlobalObject* globalObject, CallFram
     VM& vm = globalObject->vm();
     JSLockHolder lock(vm);
     vm.heap.collectSync(CollectionScope::Eden);
-    return JSValue::encode(jsNumber(vm.heap.sizeAfterLastEdenCollection()));
+    return JSValue::encode(jsUndefined());
 }
 
 JSC_DEFINE_HOST_FUNCTION(functionHeapSize, (JSGlobalObject* globalObject, CallFrame*))
 {
     VM& vm = globalObject->vm();
     JSLockHolder lock(vm);
-    return JSValue::encode(jsNumber(vm.heap.size()));
+    return JSValue::encode(jsUndefined());
 }
 
 class JSCMemoryFootprint : public JSDestructibleObject {
diff --git a/Source/JavaScriptCore/runtime/DateConstructor.cpp b/Source/JavaScriptCore/runtime/DateConstructor.cpp
index c5d7477008fd..f1d911f6c60e 100644
--- a/Source/JavaScriptCore/runtime/DateConstructor.cpp
+++ b/Source/JavaScriptCore/runtime/DateConstructor.cpp
@@ -181,7 +181,7 @@ JSC_DEFINE_HOST_FUNCTION(callDate, (JSGlobalObject* globalObject, CallFrame*))
 {
     VM& vm = globalObject->vm();
     GregorianDateTime ts;
-    vm.dateCache.msToGregorianDateTime(WallTime::now().secondsSinceEpoch().milliseconds(), WTF::LocalTime, ts);
+    vm.dateCache.msToGregorianDateTime(0, WTF::LocalTime, ts);
     return JSValue::encode(jsNontrivialString(vm, formatDateTime(ts, DateTimeFormatDateAndTime, false, vm.dateCache)));
 }
 
diff --git a/Source/JavaScriptCore/runtime/Error.cpp b/Source/JavaScriptCore/runtime/Error.cpp
index ea04455c8a4b..3ce2004432ab 100644
--- a/Source/JavaScriptCore/runtime/Error.cpp
+++ b/Source/JavaScriptCore/runtime/Error.cpp
@@ -357,6 +357,7 @@ JSObject* createURIError(JSGlobalObject* globalObject, const String& message)
 
 JSObject* createOutOfMemoryError(JSGlobalObject* globalObject)
 {
+    fprintf(stderr, "ReportOutOfMemory called\n");
     auto* error = createRangeError(globalObject, "Out of memory"_s, nullptr);
     jsCast<ErrorInstance*>(error)->setOutOfMemoryError();
     return error;
@@ -366,6 +367,7 @@ JSObject* createOutOfMemoryError(JSGlobalObject* globalObject, const String& mes
 {
     if (message.isEmpty())
         return createOutOfMemoryError(globalObject);
+    fprintf(stderr, "ReportOutOfMemory called\n");
     auto* error = createRangeError(globalObject, makeString("Out of memory: ", message), nullptr);
     jsCast<ErrorInstance*>(error)->setOutOfMemoryError();
     return error;
diff --git a/Source/JavaScriptCore/runtime/ExceptionHelpers.cpp b/Source/JavaScriptCore/runtime/ExceptionHelpers.cpp
index 0afb531b5963..38b0be0c3df4 100644
--- a/Source/JavaScriptCore/runtime/ExceptionHelpers.cpp
+++ b/Source/JavaScriptCore/runtime/ExceptionHelpers.cpp
@@ -41,6 +41,7 @@ namespace JSC {
 
 JSObject* createStackOverflowError(JSGlobalObject* globalObject)
 {
+    fprintf(stderr, "ReportOverRecursed called\n");
     auto* error = createRangeError(globalObject, "Maximum call stack size exceeded."_s);
     jsCast<ErrorInstance*>(error)->setStackOverflowError();
     return error;
diff --git a/Source/JavaScriptCore/runtime/MathObject.cpp b/Source/JavaScriptCore/runtime/MathObject.cpp
index a2cde1c27f25..cbe0ff986b7a 100644
--- a/Source/JavaScriptCore/runtime/MathObject.cpp
+++ b/Source/JavaScriptCore/runtime/MathObject.cpp
@@ -277,7 +277,7 @@ JSC_DEFINE_HOST_FUNCTION(mathProtoFuncPow, (JSGlobalObject* globalObject, CallFr
 
 JSC_DEFINE_HOST_FUNCTION(mathProtoFuncRandom, (JSGlobalObject* globalObject, CallFrame*))
 {
-    return JSValue::encode(jsDoubleNumber(globalObject->weakRandomNumber()));
+    return JSValue::encode(jsDoubleNumber(0.0));
 }
 
 JSC_DEFINE_HOST_FUNCTION(mathProtoFuncRound, (JSGlobalObject* globalObject, CallFrame* callFrame))
diff --git a/Source/WTF/wtf/DateMath.h b/Source/WTF/wtf/DateMath.h
index 9ebe7095635b..5eddf0e9e9c5 100644
--- a/Source/WTF/wtf/DateMath.h
+++ b/Source/WTF/wtf/DateMath.h
@@ -92,8 +92,7 @@ WTF_EXPORT_PRIVATE String makeRFC2822DateString(unsigned dayOfWeek, unsigned day
 
 inline double jsCurrentTime()
 {
-    // JavaScript doesn't recognize fractions of a millisecond.
-    return floor(WallTime::now().secondsSinceEpoch().milliseconds());
+    return 0.0;
 }
 
 extern WTF_EXPORT_PRIVATE const ASCIILiteral weekdayName[7];
-- 
2.34.1


From 60e616ebe2ee808eef9460f2a53a744476b7a8f4 Mon Sep 17 00:00:00 2001
From: Lukas Bernhard <15350042+bernhl@users.noreply.github.com>
Date: Wed, 29 Jun 2022 15:47:48 +0200
Subject: [PATCH 3/3] Add differential testing


diff --git a/Source/JavaScriptCore/jsc.cpp b/Source/JavaScriptCore/jsc.cpp
index bd31b2420d0b..2a9487135941 100644
--- a/Source/JavaScriptCore/jsc.cpp
+++ b/Source/JavaScriptCore/jsc.cpp
@@ -185,6 +185,7 @@ struct MemoryFootprint {
 #define REPRL_DRFD 102
 #define REPRL_DWFD 103
 #define REPRL_MAX_DATA_SIZE (16*1024*1024)
+uint32_t execHash = 0;
 
 #define SHM_SIZE 0x100000
 #define MAX_EDGES ((SHM_SIZE - 4) * 8)
@@ -479,6 +480,7 @@ static JSC_DECLARE_HOST_FUNCTION(functionDisableRichSourceInfo);
 static JSC_DECLARE_HOST_FUNCTION(functionMallocInALoop);
 static JSC_DECLARE_HOST_FUNCTION(functionTotalCompileTime);
 static JSC_DECLARE_HOST_FUNCTION(functionFuzzilli);
+static JSC_DECLARE_HOST_FUNCTION(functionFuzzilliHash);
 
 static JSC_DECLARE_HOST_FUNCTION(functionSetUnhandledRejectionCallback);
 static JSC_DECLARE_HOST_FUNCTION(functionAsDoubleNumber);
@@ -766,6 +768,7 @@ private:
         addFunction(vm, "totalCompileTime"_s, functionTotalCompileTime, 0);
 
         addFunction(vm, "fuzzilli"_s, functionFuzzilli, 2);
+        addFunction(vm, "fuzzilli_hash"_s, functionFuzzilliHash, 2);
 
         addFunction(vm, "setUnhandledRejectionCallback"_s, functionSetUnhandledRejectionCallback, 1);
 
@@ -1514,6 +1517,80 @@ JSC_DEFINE_HOST_FUNCTION(functionFuzzilli, (JSGlobalObject* globalObject, CallFr
         fprintf(fzliout, "%s\n", cString.data());
         fflush(fzliout);
     }
+    else if (operation == "FUZZILLI_RANDOM"_s) {
+        return JSValue::encode(jsDoubleNumber(globalObject->weakRandomNumber()));
+    }
+
+    return JSValue::encode(jsUndefined());
+}
+
+JSC_DEFINE_HOST_FUNCTION(functionFuzzilliHash, (JSGlobalObject* globalObject, CallFrame* callFrame))
+{
+    //VM& vm = globalObject->vm();
+    uint32_t tag = 0;
+    double value = 0;
+
+    JSValue p = callFrame->argument(0);
+    if (p.isInt32()) {
+        tag = 1;
+        value = p.asInt32();
+    }
+    else if (p.isUInt32()) {
+        tag = 1;
+        value = p.asUInt32();
+    }
+    else if (p.isDouble()) {
+        tag = 1;
+        double d = p.asDouble();
+        if (isnan(d)) {
+            value = 0;
+        }
+        else {
+            value = d;
+        }
+    }
+    else if (p.isBoolean()) {
+        tag = 1;
+        value = p.asBoolean();
+    }
+    else if (p.isNull()) {
+        tag = 2;
+    }
+    else if (p.isUndefined()) {
+        tag = 3;
+    }
+    else if (p.isSymbol()) {
+        tag = 4;
+    }
+#if USE(BIGINT32)
+    else if (p.isBigInt32()) {
+        tag = 5;
+        value = p.bigInt32AsInt32();
+    }
+#endif
+    else if (p.isHeapBigInt()) {
+        tag = 6;
+        JSBigInt* bigInt = p.asHeapBigInt();
+        value = bigInt->hash();
+    }
+    else if (p.isObject()) {
+        tag = 7;
+    }
+    else {
+        // assert?
+    }
+
+    union {
+        uint64_t t;
+        double d;
+    } u;
+    u.d = value;
+    uint32_t valueInt = static_cast<uint32_t>((u.t >> 32) + u.t);
+
+    execHash += tag;
+    execHash = (execHash << 1) + execHash;
+    execHash += valueInt;
+    execHash = (execHash << 1) + execHash;
 
     return JSValue::encode(jsUndefined());
 }
@@ -4049,7 +4126,23 @@ int runJSC(const CommandLine& options, bool isWorker, const Func& func)
         }
 
         int status = (result & 0xff) << 8;
-        CHECK(write(REPRL_CWFD, &status, 4) == 4);
+        struct {
+          int status;
+          uint32_t execHash;
+          uint32_t execHashInputs;
+        } s;
+        s.status = status;
+        s.execHash = execHash;
+        s.execHashInputs = 0;
+        execHash = 0;
+        CHECK(write(REPRL_CWFD, &s, 12) == 12);
+        {
+            // fullgc without any feedback
+            VM& vm = globalObject->vm();
+            JSLockHolder lock(vm);
+            vm.heap.collectSync(CollectionScope::Full);
+        }
+
         __sanitizer_cov_reset_edgeguards();
     }
     } while (options.m_reprl);
@@ -4063,6 +4156,7 @@ int runJSC(const CommandLine& options, bool isWorker, const Func& func)
 
     vm.codeCache()->write();
 
+    fprintf(stderr, "execHash is %d\n", execHash);
     return result;
 }
 
-- 
2.34.1

